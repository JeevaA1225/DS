Given an undirected and disconnected graph G(V, E), print its BFS traversal.
Note:
Here you need to consider that you need to print BFS path starting from vertex 0 only.
V is the number of vertices present in graph G and vertices are numbered from 0 to V-1.
E is the number of edges present in graph G.
Take graph input in the adjacency matrix.
Handle for Disconnected Graphs as well
Input Format

The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains space separated two integers, that denote that there exists an edge between vertex a and b.
Constraints

0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Output Format

Print the BFS Traversal, as described in the task.
Sample Input 0

4 4
0 1
0 3
1 2
2 3
Sample Output 0

0 1 3 2
Sample Input 1

0 0
---------------------------------------------------------------------------------------------------------------------------------
from collections import deque

def print_bfs_helper(li, sv, visited):
    queue = deque()
    visited[sv] = True
    queue.append(sv)
    
    while queue:
        front = queue.popleft()
        print(front, end=" ")
        
        for i in range(len(li)):
            if li[front][i] == 1 and not visited[i]:
                visited[i] = True
                queue.append(i)

def print_bfs(li):
    visited = [False] * len(li)
    for i in range(len(li)):
        if not visited[i]:
            print_bfs_helper(li, i, visited)

if __name__ == "__main__":
    n, e = map(int, input().split())
    if n == 0:
        exit()

    li = [[0 for _ in range(n)] for _ in range(n)]

    for _ in range(e):
        fv, sv = map(int, input().split())
        li[fv][sv] = 1
        li[sv][fv] = 1

    print_bfs(li)
============================================================================================
import java.util.*;

  class Main
  {
      int V; 
      LinkedList<Integer> adj[]; 

      Main(int v)
      {
          V = v;
          adj = new LinkedList[v];
          for (int i=0; i<v; ++i)
              adj[i] = new LinkedList();
      }

      void addEdge(int v,int w)
      {
          adj[v].add(w);
      }

      void BFS(int s)
      {
          boolean visited[] = new boolean[V];

          LinkedList<Integer> queue = new LinkedList<Integer>();

          visited[s]=true;
          queue.add(s);

          while (queue.size() != 0)
          {
              s = queue.poll();
              System.out.print(s+" ");

              Iterator<Integer> i = adj[s].listIterator();
              while (i.hasNext())
              {
                  int n = i.next();
                  if (!visited[n])
                  {
                      visited[n] = true;
                      queue.add(n);
                  }
              }
          }
      }

      public static void main(String args[])
      {
          Scanner sc = new Scanner(System.in);
          int n = sc.nextInt();
          Main g = new Main(n);
          int a , b ;
          while(n>0)
          {
            a = sc.nextInt() ;
            b = sc.nextInt() ;

            if(a == -1 || b == -1)
              break;

            g.addEdge(a, b);
          }
          if (n == 0)
              System.out.println( "Graph doesn't exist");
          else
          {
              System.out.print("BFS : ");
              g.BFS(0);
          }
      }
  }
