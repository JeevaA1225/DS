Take input in the form of level order traversal
Input Format

First line array size
Array elements
Constraints

No

Output Format

Level order traversal of tree

Sample Input 0

5
10 20 30 40 50
Sample Output 0

10 20 30 40 50
Sample Input 1

3
1 2 3
Sample Output 1

1 2 3

----------------------------------------------------------------------
import java.io.*;
import java.util.*;

public class Solution 
{
    static class Node
    {
      int key;
      Node left;
      Node right;
    };
   
        static Node root = null;

        static Queue<Node> q =new LinkedList<>();

        static Node newNode(int value)
        {
          Node n = new Node();
          n.key = value;
          n.left = null;
          n.right = null;
          return n;
        }
 
        static void insertValue(int value)
        {
          Node node = newNode(value);
          if (root == null)
            root = node;

          else if (q.peek().left == null)
            q.peek().left = node;
          else
          {
            q.peek().right = node;
            q.remove();
          }
          q.add(node);

        }

        static void createTree(int arr[],int n)
        {
          for (int i = 0; i < n; i++)
            insertValue(arr[i]);
        }
 
            static void levelOrder(Node root)
            {
              if (root == null)
                return;
              Queue<Node> n =new LinkedList<>();
              n.add(root);
              while (!n.isEmpty())
              {
                System.out.print(n.peek().key + " ");
                if (n.peek().left != null)
                  n.add(n.peek().left);
                if (n.peek().right != null)
                  n.add(n.peek().right);
                n.remove();
              }
            }

    public static void main(String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int arr[] = new int[n];
        for(int i=0;i<n;i++)
        {
            arr[i] = sc.nextInt();
        }
        createTree(arr,n);
        levelOrder(root);
    }
}
