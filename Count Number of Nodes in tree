You are given the root node of a binary tree.Count the number of nodes present.

Input Format

The first and the only line of input will contain the node data, all separated by a single space. Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.
Constraints

1 <= N <= 10^6
Where N is the total number of nodes in the binary tree.
Time Limit: 1 sec
Output Format

The only line of output prints the number of nodes in Binary Tree

Sample Input 0

1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1
Sample Output 0

7
Sample Input 1

5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1
Sample Output 1

6
==============================================================================================================================
from queue import Queue
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None


def takeInput(li):
    q = Queue()
    i = 0
    if len(li) == 1:
        return None

    data = li[i]
    i += 1


    root = Node(data)
    q.put(root)

    while not q.empty():
        frontNode = q.get()

        data = li[i]
        i += 1

        if data != -1:
            nn = Node(data)
            frontNode.left = nn
            q.put(nn)

        data = li[i]
        i += 1

        if data != -1:
            nn = Node(data)
            frontNode.right = nn
            q.put(nn)

    return root

def countNodes(root):
    if(root == None):
        return 0
    ans = 1;
    ans += countNodes(root.left);
    ans += countNodes(root.right);
    return ans;
if __name__ == "__main__":
    input = input().split()
    li = [int(x) for x in input]
    root = takeInput(li)
    print(countNodes(root))
======================================================================================================================================================
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    static class node
    {
        int data;
        node left;
        node right;
        node(int data)
        {
            this.data=data;
            left=null;
            right=null;
        }
    }
    public static void main(String[] args) {
       Scanner z=new Scanner(System.in);
        Queue<node> q=new LinkedList<>();
        
        String[] s=z.nextLine().split(" ");
        
        int i=0,data,c=1;
        node nn,head,temp;
        
        data=Integer.parseInt(s[i++]);
        nn=new node(data);
        q.add(nn);
        head=nn;
        
        while(!q.isEmpty())
        {
            temp=q.poll();
            data=Integer.parseInt(s[i++]);
            if(data!=-1)
            {
                temp.left=new node(data);
                q.add(temp.left);
                c++;
            }
            
            data=Integer.parseInt(s[i++]);
            if(data!=-1)
            {
                temp.right=new node(data);
                q.add(temp.right);
                c++;
            }
        }
        System.out.print(c);
    }
}
======================================================================================================================================
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    static class node
    {
        int data;
        node left;
        node right;
        node(int data)
        {
            this.data=data;
            left=null;
            right=null;
        }
    }
     static int count(node head)
     {
         if(head==null)
             return 0;
         int c=1;
         c=c+count(head.left);
         c=c+count(head.right);
         return c;
     }

    public static void main(String[] args) {
       Scanner z=new Scanner(System.in);
        Queue<node> q=new LinkedList<>();
        
        String[] s=z.nextLine().split(" ");
        
        int i=0,data,c=1;
        node nn,head,temp;
        
        data=Integer.parseInt(s[i++]);
        nn=new node(data);
        q.add(nn);
        head=nn;
        
        while(!q.isEmpty())
        {
            temp=q.poll();
            data=Integer.parseInt(s[i++]);
            if(data!=-1)
            {
                temp.left=new node(data);
                q.add(temp.left);
                c++;
            }
            
            data=Integer.parseInt(s[i++]);
            if(data!=-1)
            {
                temp.right=new node(data);
                q.add(temp.right);
                c++;
            }
        }
        System.out.print(count(head));
    }
}
