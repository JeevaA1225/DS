python
class Node:
    def __init__(self):
        self.data = None
        self.next = None
class ll:
    top = None

    @staticmethod
    def push(num):
        new_node = Node()
        new_node.data = num
        if ll.top is None:
            ll.top = new_node
            return
        new_node.next = ll.top
        ll.top = new_node

    @staticmethod
    def pop():
        temp = ll.top
        return_char = temp.data
        # print("Popped: " + temp.data)
        ll.top = ll.top.next
        return return_char

    @staticmethod
    def is_empty():
        if ll.top is None:
            return True
        return False

    @staticmethod
    def is_balanced(expr):
        for i in range(len(expr)):
            x = expr[i]
            if x == '(' or x == '[' or x == '{':
                ll.push(x)
                continue
            if ll.is_empty():
                return False
            check = None
            if x == ')':
                check = ll.pop()
                if check == '{' or check == '[':
                    return False
            elif x == '}':
                check = ll.pop()
                if check == '(' or check == '[':
                    return False
            elif x == ']':
                check = ll.pop()
                if check == '(' or check == '{':
                    return False
        return ll.is_empty()


if __name__ == '__main__':
    expr = input()
    if ll.is_balanced(expr):
        print("Balanced")
    else:
        print("Not Balanced")
==============================================================================================================================================

import java.util.*;

class Node {
    char data;
    Node next = null;
}

public class BalancedExpression {

    static Node top;

    static void push(char num) {
        Node newNode = new Node();
        newNode.data = num;
        if (top == null) {
            top = newNode;
            return;
        }
        newNode.next = top;
        top = newNode;
    }

    static char pop() {
        Node temp = top;
        char returnChar = temp.data;
        // System.out.println("Popped: " + temp.data);
        top = top.next;
        return returnChar;
    }

    static boolean isEmpty() {
        if (top == null) {
            return true;
        }
        return false;
    }

    static boolean isBalanced(String expr) {
        for (int i = 0; i < expr.length(); i++) {
            char x = expr.charAt(i);
            if (x == '(' || x == '[' || x == '{') {
                push(x);
                continue;
            }
            if (isEmpty()) {
                return false;
            }
            char check;
            switch (x) {
                case ')':
                    check = pop();
                    if (check == '{' || check == '[')
                        return false;
                    break;
                case '}':
                    check = pop();
                    if (check == '(' || check == '[')
                        return false;
                    break;
                case ']':
                    check = pop();
                    if (check == '(' || check == '{')
                        return false;
                    break;
            }
        }
        return (isEmpty());
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String expr = sc.nextLine();
        if (isBalanced(expr))
            System.out.println("Balanced ");
        else
            System.out.println("Not Balanced ");
        sc.close();
    }
}
