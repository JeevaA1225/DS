Take Input Level Wise of Binary Tree and then print in the inorder format

Input Format

No

Constraints

No

Output Format

Inorder traversal of Binary tree

Sample Input 0

8 3 10 1 6 -1 14 -1 -1 4 7 13 -1 -1 -1 -1 -1 -1 -1
Sample Output 0

1 3 4 6 7 8 10 13 14
Sample Input 1

1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1
Sample Output 1

4 2 5 1 6 3 7

------------------------------------------------------------------------
import java.io.*;
import java.util.*;

public class Solution 
{       
        
   static class node
    {
        int data;
        node left;
        node right; 
    node(int data)
    {
        this.data=data;
        left=null;
        right=null;
    }
    }
 
    public static void inorder(node root) 
    {

        if(root == null) 
        {
            return;
        }
        inorder(root.left);
        System.out.print(root.data + " ");
        inorder(root.right);
    }
    

    
    public static void main(String[] args)throws IOException 
    {
    
        Queue<node> q = new LinkedList<>();
        Scanner z=new Scanner(System.in);
        String[] s = z.nextLine().split(" ");
        
        int i=0;
            int n=Integer.parseInt(s[i]);
        i++;
        node nn = new node(n);
            q.add(nn);
        node head=nn;

        while(!q.isEmpty())
        {
            node currentNode;
            currentNode =  q.poll();
            int leftChildData = Integer.parseInt(s[i]);
            i++;

            if(leftChildData != -1)
            {
                node leftChild = new node(leftChildData);
                currentNode.left = leftChild;
                q.add(leftChild);
            }

            int rightChildData = Integer.parseInt(s[i]);
            i++;

            if(rightChildData != -1)
            {
                node rightChild = new node(rightChildData);
                currentNode.right = rightChild;
                q.add(rightChild);
            }
        }
         inorder(head);
    }
}
