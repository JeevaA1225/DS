For a given singly linked list of integers, arrange the elements such that all the even numbers are placed after the odd numbers. The relative order of the odd and even terms should remain unchanged.
Input Format

The first line of each test case or query contains the elements of the singly linked list separated by a single space.
Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element
Constraints

Time :- 1 sec
Output Format

Output for every test case will be printed in a seperate line.
Sample Input 0

1 4 5 2 -1
Sample Output 0

1 5 4 2
Sample Input 1

1 11 3 6 8 0 9 -1
Sample Output 1

1 11 3 9 6 8 0
==========================================================================================================================================
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    Node ohead;
    Node otemp;
    Node ehead;
    Node etemp;
    class Node
    {
        int data;
        Node next;
        Node(int data)
        {
            this.data=data;
            this.next=null;
        }
    }
    void oddins(int data)
    {
        Node nn=new Node(data);
        if(ohead==null)
        {
            ohead=nn;
            otemp=nn;
        }
        else
        {
            otemp.next=nn;
            otemp=nn;
        }
    }
    void evenins(int data)
    {
        Node nn=new Node(data);
        if(ehead==null)
        {
            ehead=nn;
            etemp=nn;
        }
        else
        {
            etemp.next=nn;
            etemp=nn;
        }
    }
    
    
    
    void dis()
    {
        Node temp=ohead;
        while(temp!=null)
        {
            System.out.print(temp.data+" ");
            temp=temp.next;
        }  
        
        temp=ehead;
        while(temp!=null)
        {
            System.out.print(temp.data+" ");
            temp=temp.next;
        }  
        
    }
    public static void main(String[] args) {
        Scanner z=new Scanner(System.in);
        Solution s=new Solution();
        while(true)
        {
            int n=z.nextInt();
                if(n!=-1)
                {
                    if(n%2==0)
                        s.evenins(n);
                    else
                        s.oddins(n);
                } 
                else
                    break;
        }
        s.dis();
      
    }
}
